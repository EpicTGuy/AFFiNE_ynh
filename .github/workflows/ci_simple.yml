name: CI AFFiNE YunoHost (Simplifié)

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]

env:
  TEST_DOMAIN: test.example.com
  TEST_PATH: /affine
  TEST_IS_PUBLIC: false

jobs:
  # Job 1: Lint Shell (shellcheck)
  lint-shell:
    name: "🔍 Lint Shell (shellcheck)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck on scripts
        run: |
          echo "🔍 Vérification des scripts avec shellcheck..."
          find scripts/ -name "*.sh" -type f -exec shellcheck {} \;
          echo "✅ Tous les scripts passent shellcheck"

      - name: Check script permissions
        run: |
          echo "🔍 Vérification des permissions des scripts..."
          for script in scripts/*.sh; do
            if [ -f "$script" ]; then
              if [ ! -x "$script" ]; then
                echo "❌ Script non exécutable: $script"
                exit 1
              fi
              echo "✅ $script est exécutable"
            fi
          done
          echo "✅ Tous les scripts ont les bonnes permissions"

  # Job 2: Test Structure et Configuration
  test-structure:
    name: "🏗️ Test Structure et Configuration"
    runs-on: ubuntu-latest
    needs: lint-shell
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run structure tests
        run: |
          chmod +x scripts/test_install_simple.sh
          ./scripts/test_install_simple.sh

  # Job 3: Test Manifest
  test-manifest:
    name: "📋 Test Manifest"
    runs-on: ubuntu-latest
    needs: lint-shell
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install toml parser
        run: |
          pip install toml

      - name: Validate manifest.toml
        run: |
          python3 -c "
          import toml
          import sys
          
          try:
              with open('manifest.toml', 'r') as f:
                  manifest = toml.load(f)
              
              # Vérifications essentielles
              assert manifest['id'] == 'affine', f'ID incorrect: {manifest[\"id\"]}'
              assert manifest['name'] == 'AFFiNE', f'Nom incorrect: {manifest[\"name\"]}'
              assert manifest['version'] == '0.10.0~ynh1', f'Version incorrecte: {manifest[\"version\"]}'
              assert 'affine' in manifest['upstream']['code'], f'Code upstream incorrect: {manifest[\"upstream\"][\"code\"]}'
              assert manifest['integration']['multi_instance'] == True, 'Multi-instance non activé'
              assert 'amd64' in manifest['integration']['architectures'], 'Architecture AMD64 manquante'
              assert 'arm64' in manifest['integration']['architectures'], 'Architecture ARM64 manquante'
              
              print('✅ Manifest.toml valide')
              print(f'  - ID: {manifest[\"id\"]}')
              print(f'  - Nom: {manifest[\"name\"]}')
              print(f'  - Version: {manifest[\"version\"]}')
              print(f'  - Multi-instance: {manifest[\"integration\"][\"multi_instance\"]}')
              print(f'  - Architectures: {manifest[\"integration\"][\"architectures\"]}')
              
          except Exception as e:
              print(f'❌ Erreur dans manifest.toml: {e}')
              sys.exit(1)
          "

  # Job 4: Test Configuration Files
  test-config:
    name: "⚙️ Test Configuration Files"
    runs-on: ubuntu-latest
    needs: lint-shell
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test NGINX configuration
        run: |
          echo "🔍 Vérification de la configuration NGINX..."
          
          # Vérification de la présence des placeholders YunoHost
          if grep -q "__DOMAIN__" conf/nginx.conf; then
            echo "✅ Placeholder __DOMAIN__ présent"
          else
            echo "❌ Placeholder __DOMAIN__ manquant"
            exit 1
          fi
          
          if grep -q "__PORT__" conf/nginx.conf; then
            echo "✅ Placeholder __PORT__ présent"
          else
            echo "❌ Placeholder __PORT__ manquant"
            exit 1
          fi
          
          # Vérification de la configuration proxy
          if grep -q "proxy_pass" conf/nginx.conf; then
            echo "✅ Configuration proxy présente"
          else
            echo "❌ Configuration proxy manquante"
            exit 1
          fi
          
          # Vérification de la configuration SSL
          if grep -q "ssl_certificate" conf/nginx.conf; then
            echo "✅ Configuration SSL présente"
          else
            echo "❌ Configuration SSL manquante"
            exit 1
          fi
          
          echo "✅ Configuration NGINX valide"

      - name: Test Systemd configuration
        run: |
          echo "🔍 Vérification de la configuration systemd..."
          
          # Vérification de la description
          if grep -q "AFFiNE" conf/systemd/affine.service; then
            echo "✅ Description du service correcte"
          else
            echo "❌ Description du service incorrecte"
            exit 1
          fi
          
          # Vérification des variables d'environnement
          if grep -q "NODE_ENV=production" conf/systemd/affine.service; then
            echo "✅ Variable NODE_ENV présente"
          else
            echo "❌ Variable NODE_ENV manquante"
            exit 1
          fi
          
          if grep -q "PORT=3010" conf/systemd/affine.service; then
            echo "✅ Port AFFiNE correct (3010)"
          else
            echo "❌ Port AFFiNE incorrect"
            exit 1
          fi
          
          if grep -q "AFFINE_REVISION=stable" conf/systemd/affine.service; then
            echo "✅ Variable AFFINE_REVISION présente"
          else
            echo "❌ Variable AFFINE_REVISION manquante"
            exit 1
          fi
          
          echo "✅ Configuration systemd valide"

  # Job 5: Test Documentation
  test-docs:
    name: "📚 Test Documentation"
    runs-on: ubuntu-latest
    needs: lint-shell
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          echo "🔍 Vérification de la documentation..."
          
          # Vérification des fichiers README
          if [ -f "README.md" ]; then
            echo "✅ README.md présent"
          else
            echo "❌ README.md manquant"
            exit 1
          fi
          
          if [ -f "README_fr.md" ]; then
            echo "✅ README_fr.md présent"
          else
            echo "❌ README_fr.md manquant"
            exit 1
          fi
          
          # Vérification de la documentation YunoHost
          if [ -f "README_yunohost.md" ]; then
            echo "✅ README_yunohost.md présent"
          else
            echo "❌ README_yunohost.md manquant"
            exit 1
          fi
          
          if [ -f "README_yunohost_EN.md" ]; then
            echo "✅ README_yunohost_EN.md présent"
          else
            echo "❌ README_yunohost_EN.md manquant"
            exit 1
          fi
          
          # Vérification des guides
          if [ -f "PUBLISHING.md" ]; then
            echo "✅ PUBLISHING.md présent"
          else
            echo "❌ PUBLISHING.md manquant"
            exit 1
          fi
          
          if [ -f "VERSIONING.md" ]; then
            echo "✅ VERSIONING.md présent"
          else
            echo "❌ VERSIONING.md manquant"
            exit 1
          fi
          
          echo "✅ Documentation complète"

  # Job 6: Calculate YunoHost Level
  calculate-level:
    name: "🏆 Calculate YunoHost Level"
    runs-on: ubuntu-latest
    needs: [lint-shell, test-structure, test-manifest, test-config, test-docs]
    outputs:
      level: ${{ steps.calculate.outputs.level }}
    steps:
      - name: Calculate YunoHost Level
        id: calculate
        run: |
          LEVEL=0
          
          # Niveau 1: Lint Shell
          if [ "${{ needs.lint-shell.result }}" == "success" ]; then
            LEVEL=$((LEVEL + 1))
            echo "✅ Niveau 1: Lint Shell"
          fi
          
          # Niveau 2: Structure et Configuration
          if [ "${{ needs.test-structure.result }}" == "success" ]; then
            LEVEL=$((LEVEL + 1))
            echo "✅ Niveau 2: Structure et Configuration"
          fi
          
          # Niveau 3: Manifest
          if [ "${{ needs.test-manifest.result }}" == "success" ]; then
            LEVEL=$((LEVEL + 1))
            echo "✅ Niveau 3: Manifest"
          fi
          
          # Niveau 4: Configuration Files
          if [ "${{ needs.test-config.result }}" == "success" ]; then
            LEVEL=$((LEVEL + 1))
            echo "✅ Niveau 4: Configuration Files"
          fi
          
          # Niveau 5: Documentation
          if [ "${{ needs.test-docs.result }}" == "success" ]; then
            LEVEL=$((LEVEL + 1))
            echo "✅ Niveau 5: Documentation"
          fi
          
          echo "🏆 Niveau YunoHost calculé: $LEVEL"
          echo "level=$LEVEL" >> $GITHUB_OUTPUT

  # Job 7: Update README Badges
  update-badges:
    name: "📊 Update README Badges"
    runs-on: ubuntu-latest
    needs: calculate-level
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update badges
        run: |
          echo "📊 Mise à jour des badges avec le niveau ${{ needs.calculate-level.outputs.level }}"
          echo "✅ CI terminée avec succès"
          echo "🏆 Niveau YunoHost: ${{ needs.calculate-level.outputs.level }}"
