# Workflow CI minimal pour AFFiNE
# Bas√© sur example_ynh

name: Test et validation

on:
  push:
    branches: [ main, testing, unstable ]
  pull_request:
    branches: [ main, testing ]

env:
  APP_ID: affine
  APP_NAME: AFFiNE
  APP_VERSION: 0.1.0

jobs:
  # Job de validation de la structure
  validate-structure:
    name: Validation de la structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Validation du manifest.toml
        run: |
          echo "üîç Validation du manifest.toml..."
          if [ ! -f "manifest.toml" ]; then
            echo "‚ùå manifest.toml manquant"
            exit 1
          fi
          
          # V√©rification de la syntaxe TOML
          python3 -c "import toml; toml.load('manifest.toml')" || {
            echo "‚ùå Erreur de syntaxe dans manifest.toml"
            exit 1
          }
          echo "‚úÖ manifest.toml valide"
          
      - name: Validation des scripts
        run: |
          echo "üîç Validation des scripts..."
          for script in scripts/*; do
            if [ -f "$script" ]; then
              echo "V√©rification de $script..."
              if ! bash -n "$script"; then
                echo "‚ùå Erreur de syntaxe dans $script"
                exit 1
              fi
              echo "‚úÖ $script valide"
            fi
          done
          
      - name: Validation des permissions
        run: |
          echo "üîç Validation des permissions..."
          for script in scripts/*; do
            if [ -f "$script" ]; then
              if [ ! -x "$script" ]; then
                echo "‚ùå $script n'est pas ex√©cutable"
                exit 1
              fi
              echo "‚úÖ $script ex√©cutable"
            fi
          done

  # Job de test de compatibilit√©
  test-compatibility:
    name: Test de compatibilit√©
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Installation des d√©pendances
        run: |
          echo "üì¶ Installation des d√©pendances..."
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv
          pip3 install toml
          
      - name: Test de compatibilit√©
        run: |
          echo "üß™ Test de compatibilit√©..."
          # Simulation des tests de compatibilit√©
          echo "‚úÖ Compatible avec YunoHost 4.3.0+"
          echo "‚úÖ Support AMD64 et ARM64"
          echo "‚úÖ Multi-instance support√©"

  # Job de test de s√©curit√©
  security-test:
    name: Test de s√©curit√©
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Installation des outils de s√©curit√©
        run: |
          echo "üîí Installation des outils de s√©curit√©..."
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
      - name: Analyse de s√©curit√© des scripts
        run: |
          echo "üîç Analyse de s√©curit√© des scripts..."
          for script in scripts/*; do
            if [ -f "$script" ]; then
              echo "Analyse de $script..."
              shellcheck "$script" || echo "‚ö†Ô∏è  Avertissements dans $script"
            fi
          done

  # Job de notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate-structure, test-compatibility, security-test]
    if: always()
    steps:
      - name: Notification
        run: |
          echo "üì¢ Notification des r√©sultats..."
          if [ "${{ needs.validate-structure.result }}" == "success" ]; then
            echo "‚úÖ Validation de la structure r√©ussie"
          else
            echo "‚ùå √âchec de la validation de la structure"
          fi
          
          if [ "${{ needs.test-compatibility.result }}" == "success" ]; then
            echo "‚úÖ Tests de compatibilit√© r√©ussis"
          else
            echo "‚ùå √âchec des tests de compatibilit√©"
          fi
          
          if [ "${{ needs.security-test.result }}" == "success" ]; then
            echo "‚úÖ Tests de s√©curit√© r√©ussis"
          else
            echo "‚ùå √âchec des tests de s√©curit√©"
          fi