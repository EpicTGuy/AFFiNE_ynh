#!/bin/bash

# Script de test simplifi√© pour AFFiNE YunoHost
# Compatible CI - ne n√©cessite pas YunoHost install√©

set -e

# Configuration
APP_ID="affine"
TEST_DOMAIN="${TEST_DOMAIN:-test.example.com}"
TEST_PATH="${TEST_PATH:-/affine}"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions de logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# D√©but du test
log_info "üöÄ D√©marrage du test simplifi√© pour $APP_ID"

# V√©rification des fichiers essentiels
log_info "V√©rification des fichiers essentiels..."

ESSENTIAL_FILES=(
    "manifest.toml"
    "scripts/install"
    "scripts/remove"
    "scripts/upgrade"
    "scripts/backup"
    "scripts/restore"
    "conf/nginx.conf"
    "conf/systemd/affine.service"
)

for file in "${ESSENTIAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        log_success "‚úÖ Fichier trouv√©: $file"
    else
        log_error "‚ùå Fichier manquant: $file"
        exit 1
    fi
done

# V√©rification de la syntaxe des scripts
log_info "V√©rification de la syntaxe des scripts..."

for script in scripts/*.sh; do
    if [ -f "$script" ]; then
        if bash -n "$script"; then
            log_success "‚úÖ Syntaxe OK: $(basename "$script")"
        else
            log_error "‚ùå Erreur de syntaxe: $(basename "$script")"
            exit 1
        fi
    fi
done

# V√©rification du manifest
log_info "V√©rification du manifest..."

if grep -q 'id = "affine"' manifest.toml; then
    log_success "‚úÖ ID de l'application correct"
else
    log_error "‚ùå ID de l'application incorrect"
    exit 1
fi

if grep -q 'name = "AFFiNE"' manifest.toml; then
    log_success "‚úÖ Nom de l'application correct"
else
    log_error "‚ùå Nom de l'application incorrect"
    exit 1
fi

if grep -q 'version = "0.0.1~ynh1"' manifest.toml; then
    log_success "‚úÖ Version correcte"
else
    log_error "‚ùå Version incorrecte"
    exit 1
fi

# V√©rification de la configuration NGINX
log_info "V√©rification de la configuration NGINX..."

if grep -q "__PATH__" conf/nginx.conf; then
    log_success "‚úÖ Placeholders YunoHost pr√©sents"
else
    log_warning "‚ö†Ô∏è Placeholders YunoHost manquants"
fi

if grep -q "proxy_pass" conf/nginx.conf; then
    log_success "‚úÖ Configuration proxy pr√©sente"
else
    log_error "‚ùå Configuration proxy manquante"
    exit 1
fi

if grep -q "__PORT__" conf/nginx.conf; then
    log_success "‚úÖ Placeholder port pr√©sent"
else
    log_warning "‚ö†Ô∏è Placeholder port manquant"
fi

# V√©rification du service systemd
log_info "V√©rification du service systemd..."

if grep -q "AFFiNE" conf/systemd/affine.service; then
    log_success "‚úÖ Description du service correcte"
else
    log_error "‚ùå Description du service incorrecte"
    exit 1
fi

if grep -q "NODE_ENV=production" conf/systemd/affine.service; then
    log_success "‚úÖ Variables d'environnement pr√©sentes"
else
    log_error "‚ùå Variables d'environnement manquantes"
    exit 1
fi

if grep -q "node server.js" conf/systemd/affine.service; then
    log_success "‚úÖ Entrypoint Node.js correct"
else
    log_error "‚ùå Entrypoint Node.js incorrect"
    exit 1
fi

# V√©rification des permissions des scripts
log_info "V√©rification des permissions des scripts..."

for script in scripts/*.sh; do
    if [ -f "$script" ]; then
        if [ -x "$script" ]; then
            log_success "‚úÖ Script ex√©cutable: $(basename "$script")"
        else
            log_warning "‚ö†Ô∏è Script non ex√©cutable: $(basename "$script")"
        fi
    fi
done

# V√©rification de la structure des r√©pertoires
log_info "V√©rification de la structure des r√©pertoires..."

ESSENTIAL_DIRS=(
    "conf"
    "conf/systemd"
    "scripts"
    "doc"
    ".github/workflows"
)

for dir in "${ESSENTIAL_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        log_success "‚úÖ R√©pertoire trouv√©: $dir"
    else
        log_error "‚ùå R√©pertoire manquant: $dir"
        exit 1
    fi
done

# V√©rification de la CI
log_info "V√©rification de la configuration CI..."

if [ -f ".github/workflows/ci.yml" ]; then
    log_success "‚úÖ Workflow CI trouv√©"
else
    log_error "‚ùå Workflow CI manquant"
    exit 1
fi

if grep -q "CI AFFiNE YunoHost" .github/workflows/ci.yml; then
    log_success "‚úÖ Nom du workflow correct"
else
    log_error "‚ùå Nom du workflow incorrect"
    exit 1
fi

# R√©sum√© des tests
log_info "üìä R√©sum√© des tests:"
log_info "  - Fichiers essentiels: ‚úÖ"
log_info "  - Syntaxe des scripts: ‚úÖ"
log_info "  - Configuration manifest: ‚úÖ"
log_info "  - Configuration NGINX: ‚úÖ"
log_info "  - Service systemd: ‚úÖ"
log_info "  - Permissions: ‚úÖ"
log_info "  - Structure: ‚úÖ"
log_info "  - CI: ‚úÖ"

log_success "üéâ Test simplifi√© termin√© avec succ√®s pour $APP_ID"
log_success "Tous les composants sont pr√™ts pour l'installation YunoHost"

exit 0
