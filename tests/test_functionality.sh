#!/bin/bash

# Test de fonctionnalit√© pour AFFiNE
# V√©rifie que l'application fonctionne correctement

set -e

# Chargement des helpers YunoHost
source /usr/share/yunohost/helpers

# Variables de test
APP_ID="affine"
TEST_DOMAIN="test.example.com"
TEST_PATH="/affine"

# Fonction de nettoyage
cleanup() {
    ynh_log_info "Nettoyage des tests de fonctionnalit√©..."
    ynh_log_info "Nettoyage termin√©"
}

# Gestion des erreurs
trap cleanup EXIT

# Test 1: V√©rification de la disponibilit√© du service
ynh_log_info "Test 1: V√©rification de la disponibilit√© du service"
APP_PORT=$(ynh_app_setting_get "$APP_ID" "app_port")
if [ -z "$APP_PORT" ]; then
    ynh_log_error "Le port de l'application n'est pas d√©fini"
    exit 1
fi

# Attendre que le service soit pr√™t
sleep 5

# Test de connectivit√© locale
if ! curl -f "http://127.0.0.1:$APP_PORT/health" > /dev/null 2>&1; then
    ynh_log_error "Le service ne r√©pond pas sur le port local $APP_PORT"
    exit 1
fi
ynh_log_info "‚úÖ Service local op√©rationnel"

# Test 2: V√©rification de la r√©ponse HTTP
ynh_log_info "Test 2: V√©rification de la r√©ponse HTTP"
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:$APP_PORT/")
if [ "$HTTP_STATUS" != "200" ]; then
    ynh_log_error "Le service retourne un code HTTP $HTTP_STATUS au lieu de 200"
    exit 1
fi
ynh_log_info "‚úÖ R√©ponse HTTP 200 OK"

# Test 3: V√©rification du contenu HTML
ynh_log_info "Test 3: V√©rification du contenu HTML"
HTML_CONTENT=$(curl -s "http://127.0.0.1:$APP_PORT/")
if ! echo "$HTML_CONTENT" | grep -q "AFFiNE\|affine"; then
    ynh_log_error "Le contenu HTML ne contient pas les √©l√©ments attendus d'AFFiNE"
    exit 1
fi
ynh_log_info "‚úÖ Contenu HTML valide"

# Test 4: V√©rification des en-t√™tes de s√©curit√©
ynh_log_info "Test 4: V√©rification des en-t√™tes de s√©curit√©"
SECURITY_HEADERS=$(curl -s -I "http://127.0.0.1:$APP_PORT/")
if ! echo "$SECURITY_HEADERS" | grep -q "X-Content-Type-Options"; then
    ynh_log_warning "L'en-t√™te X-Content-Type-Options n'est pas pr√©sent"
fi
if ! echo "$SECURITY_HEADERS" | grep -q "X-Frame-Options"; then
    ynh_log_warning "L'en-t√™te X-Frame-Options n'est pas pr√©sent"
fi
if ! echo "$SECURITY_HEADERS" | grep -q "Referrer-Policy"; then
    ynh_log_warning "L'en-t√™te Referrer-Policy n'est pas pr√©sent"
fi
ynh_log_info "‚úÖ En-t√™tes de s√©curit√© v√©rifi√©s"

# Test 5: V√©rification de la configuration de la base de donn√©es
ynh_log_info "Test 5: V√©rification de la configuration de la base de donn√©es"
DB_NAME=$(ynh_app_setting_get "$APP_ID" "db_name")
if [ -z "$DB_NAME" ]; then
    ynh_log_error "La base de donn√©es n'est pas d√©finie"
    exit 1
fi

# Test de connexion √† la base de donn√©es
if ! sudo -u postgres psql -d "$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
    ynh_log_error "Impossible de se connecter √† la base de donn√©es $DB_NAME"
    exit 1
fi
ynh_log_info "‚úÖ Base de donn√©es accessible"

# Test 6: V√©rification de la configuration Redis
ynh_log_info "Test 6: V√©rification de la configuration Redis"
REDIS_DB=$(ynh_app_setting_get "$APP_ID" "redis_db")
if [ -z "$REDIS_DB" ]; then
    ynh_log_error "La base Redis n'est pas d√©finie"
    exit 1
fi

# Test de connexion √† Redis
if ! redis-cli -n "$REDIS_DB" ping > /dev/null 2>&1; then
    ynh_log_error "Impossible de se connecter √† Redis DB $REDIS_DB"
    exit 1
fi
ynh_log_info "‚úÖ Redis accessible"

# Test 7: V√©rification des fichiers de configuration
ynh_log_info "Test 7: V√©rification des fichiers de configuration"
APP_DIR=$(ynh_app_setting_get "$APP_ID" "app_dir")
if [ ! -f "$APP_DIR/config/config.json" ]; then
    ynh_log_error "Le fichier de configuration n'existe pas"
    exit 1
fi

# V√©rification du contenu de la configuration
if ! jq empty "$APP_DIR/config/config.json" 2>/dev/null; then
    ynh_log_error "Le fichier de configuration JSON n'est pas valide"
    exit 1
fi
ynh_log_info "‚úÖ Configuration JSON valide"

# Test 8: V√©rification des permissions des fichiers
ynh_log_info "Test 8: V√©rification des permissions des fichiers"
APP_USER=$(ynh_app_setting_get "$APP_ID" "app_user")
if [ -z "$APP_USER" ]; then
    ynh_log_error "L'utilisateur de l'application n'est pas d√©fini"
    exit 1
fi

# V√©rification des permissions du r√©pertoire de l'application
if [ "$(stat -c %U "$APP_DIR")" != "$APP_USER" ]; then
    ynh_log_error "Le r√©pertoire de l'application n'appartient pas √† $APP_USER"
    exit 1
fi
ynh_log_info "‚úÖ Permissions des fichiers correctes"

# Test 9: V√©rification des logs
ynh_log_info "Test 9: V√©rification des logs"
APP_LOG_DIR="/var/log/$APP_ID"
if [ ! -d "$APP_LOG_DIR" ]; then
    ynh_log_error "Le r√©pertoire de logs n'existe pas"
    exit 1
fi

# V√©rification des permissions des logs
if [ "$(stat -c %U "$APP_LOG_DIR")" != "$APP_USER" ]; then
    ynh_log_error "Le r√©pertoire de logs n'appartient pas √† $APP_USER"
    exit 1
fi
ynh_log_info "‚úÖ Logs accessibles"

# Test 10: V√©rification de la configuration NGINX
ynh_log_info "Test 10: V√©rification de la configuration NGINX"
if [ ! -f "/etc/nginx/conf.d/$TEST_DOMAIN.d/$APP_ID.conf" ]; then
    ynh_log_error "La configuration NGINX n'existe pas"
    exit 1
fi

# Test de la syntaxe NGINX
if ! nginx -t > /dev/null 2>&1; then
    ynh_log_error "La configuration NGINX contient des erreurs de syntaxe"
    exit 1
fi
ynh_log_info "‚úÖ Configuration NGINX valide"

# Test 11: V√©rification de la configuration systemd
ynh_log_info "Test 11: V√©rification de la configuration systemd"
if [ ! -f "/etc/systemd/system/$APP_ID.service" ]; then
    ynh_log_error "La configuration systemd n'existe pas"
    exit 1
fi

# Test de la syntaxe systemd
if ! systemd-analyze verify "/etc/systemd/system/$APP_ID.service" > /dev/null 2>&1; then
    ynh_log_error "La configuration systemd contient des erreurs"
    exit 1
fi
ynh_log_info "‚úÖ Configuration systemd valide"

# Test 12: V√©rification de la configuration SSOwat
ynh_log_info "Test 12: V√©rification de la configuration SSOwat"
if [ ! -f "/etc/ssowat/conf.d/$APP_ID.yml" ]; then
    ynh_log_error "La configuration SSOwat n'existe pas"
    exit 1
fi
ynh_log_info "‚úÖ Configuration SSOwat valide"

# Test 13: V√©rification des m√©triques de performance
ynh_log_info "Test 13: V√©rification des m√©triques de performance"
# V√©rification de l'utilisation de la m√©moire
MEMORY_USAGE=$(ps -o rss= -p $(pgrep -f "$APP_ID") | awk '{sum+=$1} END {print sum/1024}')
if [ -n "$MEMORY_USAGE" ] && [ "$MEMORY_USAGE" -gt 1000 ]; then
    ynh_log_warning "L'utilisation de la m√©moire est √©lev√©e : ${MEMORY_USAGE}MB"
fi
ynh_log_info "‚úÖ M√©triques de performance v√©rifi√©es"

# Test 14: V√©rification de la disponibilit√© des API
ynh_log_info "Test 14: V√©rification de la disponibilit√© des API"
# Test des endpoints principaux
API_ENDPOINTS=("/api/health" "/api/status" "/api/info")
for endpoint in "${API_ENDPOINTS[@]}"; do
    if curl -f "http://127.0.0.1:$APP_PORT$endpoint" > /dev/null 2>&1; then
        ynh_log_info "‚úÖ Endpoint $endpoint disponible"
    else
        ynh_log_warning "‚ö†Ô∏è  Endpoint $endpoint non disponible"
    fi
done

# Test 15: V√©rification de la configuration de monitoring
ynh_log_info "Test 15: V√©rification de la configuration de monitoring"
if [ -f "/etc/yunohost/apps/$APP_ID/monitoring.conf" ]; then
    ynh_log_info "‚úÖ Configuration de monitoring pr√©sente"
else
    ynh_log_warning "‚ö†Ô∏è  Configuration de monitoring manquante"
fi

# R√©sum√© des tests
ynh_log_info "üéâ Tous les tests de fonctionnalit√© ont r√©ussi !"
ynh_log_info "üìä R√©sum√© :"
ynh_log_info "   ‚Ä¢ Service op√©rationnel sur le port $APP_PORT"
ynh_log_info "   ‚Ä¢ Base de donn√©es $DB_NAME accessible"
ynh_log_info "   ‚Ä¢ Redis DB $REDIS_DB accessible"
ynh_log_info "   ‚Ä¢ Configuration valide"
ynh_log_info "   ‚Ä¢ Permissions correctes"
ynh_log_info "   ‚Ä¢ Logs accessibles"
ynh_log_info "   ‚Ä¢ NGINX configur√©"
ynh_log_info "   ‚Ä¢ Systemd configur√©"
ynh_log_info "   ‚Ä¢ SSOwat configur√©"

exit 0
